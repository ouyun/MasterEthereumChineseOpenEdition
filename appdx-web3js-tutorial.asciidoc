[appendix]
[[web3js_tutorial]]
== web3.js Tutorial

=== Description
((("web3.js","tutorial", id="ix_appdx-web3js-tutorial-asciidoc0", range="startofrange")))This tutorial is based on web3@1.0.0-beta.29 web3.js. It is intended as an introduction to web3.js.

The web3.js JavaScript library is a collection of modules that contain specific functionality for the Ethereum ecosystem, together with an Ethereum-compatible JavaScript API that implements the Generic JSON RPC spec.

To run this script you donâ€™t need to run your own local node, because it uses the https://infura.io[Infura services].

=== web3.js Contract Basic Interaction in a Nonblocked (Async) Fashion

((("web3.js","contract basic interaction in nonblocked (Async) fashion")))Check you have a valid +npm+ version:

++++
<pre data-type="programlisting">
$ <strong>npm -v</strong>
5.6.0
</pre>
++++

If you haven't, initialize +npm+:

++++
<pre data-type="programlisting">
$ <strong>npm init</strong>
</pre>
++++

Install basic dependencies:

++++
<pre data-type="programlisting">
$ <strong>npm i command-line-args</strong>
$ <strong>npm i web3</strong>
$ <strong>npm i node-rest-client-promise</strong>
</pre>
++++

This will update your _package.json_ configuration file with your new dependencies.

==== Node.js Script Execution

((("web3.js","node.js script execution")))Basic execution:

++++
<pre data-type="programlisting">
$ <strong>node code/web3js/web3-contract-basic-interaction.js</strong>
</pre>
++++

Use your own Infura token (register at https://infura.io/[] and store the api-key in a local file called __infura_token__):

++++
<pre data-type="programlisting">
$ <strong>node code/web3js/web3-contract-basic-interaction.js \
  --infuraFileToken /path/to/file/with/infura_token</strong>
</pre>
++++

or:

++++
<pre data-type="programlisting">
$ <strong>node code/web3js/web3-contract-basic-interaction.js \
  /path/to/file/with/infura_token</strong>
</pre>
++++

This will read the file with your own token and pass it in as a command-line argument to the actual command.

=== Reviewing the Demo Script

((("web3.js","reviewing demo script")))Next, let's review our demo script, _web3-contract-basic-interaction_.

We use the +Web3+ object to obtain a basic web3 provider:

[source,solidity]
----
var web3 = new Web3(infura_host);
----

We can then interact with web3 and try some basic functions. Let's see the protocol version:

[source,solidity]
----
web3.eth.getProtocolVersion().then(function(protocolVersion) {
      console.log(`Protocol Version: ${protocolVersion}`);
  })
----

Now let's look at the current gas price:

[source,solidity]
----
web3.eth.getGasPrice().then(function(gasPrice) {
      console.log(`Gas Price: ${gasPrice}`);
  })
----

What's the last mined block in the current chain?

[source,solidity]
----
web3.eth.getBlockNumber().then(function(blockNumber) {
      console.log(`Block Number: ${blockNumber}`);
  })
----

=== Contract Interaction

((("web3.js","contract interaction", id="ix_appdx-web3js-tutorial-asciidoc1", range="startofrange")))Now let's try some basic interactions with a contract. For these examples, we'll use the https://bit.ly/2MPZZLx[+WETH9_+ contract] on the Kovan testnet.

[role="pagebreak-before"]
First, let's initialize our contract address:

[source,solidity]
----
var our_contract_address = "0xd0A1E359811322d97991E03f863a0C30C2cF029C";
----

We can then look at its balance:

[source,solidity]
----
web3.eth.getBalance(our_contract_address).then(function(balance) {
      console.log(`Balance of ${our_contract_address}: ${balance}`);
})
----

and see its bytecode:

[source,solidity]
----
web3.eth.getCode(our_contract_address).then(function(code) {
      console.log(code);
})
----

Next, we'll prepare our environment to interact with the Etherscan explorer API.

Let's initialize our contract URL in the Etherscan explorer API for the Kovan chain:

[source,solidity]
----
var etherscan_url =
  "https://kovan.etherscan.io/api?module=contract&action=getabi&
  address=${our_contract_address}"
----

And let's initialize a REST client to interact with the Etherscan API:

[source,solidity]
----
var client = require('node-rest-client-promise').Client();
----

and get a client promise:

[source,solidity]
----
client.getPromise(etherscan_url)
----

Once we've got a valid client promise, we can get our contract ABI from the Etherscan API:

[source,solidity]
----
.then((client_promise) => {
  our_contract_abi = JSON.parse(client_promise.data.result);
----

And now we can create our contract object as a promise to consume later:

[source,solidity]
----
  return new Promise((resolve, reject) => {
      var our_contract = new web3.eth.Contract(our_contract_abi,
                                               our_contract_address);
      try {
        // If all goes well
        resolve(our_contract);
      } catch (ex) {
        // If something goes wrong
        reject(ex);
      }
    });
})
----

If our contract promise returns successfully, we can start interacting with it:

[source,solidity]
----
.then((our_contract) => {
----

Let's see our contract address:

[source,solidity]
----
console.log(`Our Contract address:
            ${our_contract._address}`);
----

or alternatively:

[source,solidity]
----
console.log(`Our Contract address in another way:
            ${our_contract.options.address}`);
----

Now let's query our contract ABI:

[source,solidity]
----
console.log("Our contract abi: " +
            JSON.stringify(our_contract.options.jsonInterface));
----

We can see our contract's total supply using a callback:

[source,solidity]
----
our_contract.methods.totalSupply().call(function(err, totalSupply) {
    if (!err) {
        console.log(`Total Supply with a callback:  ${totalSupply}`);
    } else {
        console.log(err);
    }
});
----

Or we can use the returned promise instead of passing in the callback:(((range="endofrange", startref="ix_appdx-web3js-tutorial-asciidoc1")))

[source,solidity]
----
our_contract.methods.totalSupply().call().then(function(totalSupply){
    console.log(`Total Supply with a promise:  ${totalSupply}`);
}).catch(function(err) {
    console.log(err);
});
----

=== Asynchronous Operation with Await

((("await construct")))((("web3.js","asynchronous operation with await")))Now that you've seen the basic tutorial, you can try the same interactions using an asynchronous +await+ construct. Review the _web3-contract-basic-interaction-async-await.js_ script in http://bit.ly/2ABrFkl[_code/web3js_] and compare it to this tutorial to see how they differ. Async-await is easier to read, as it makes the asynchronous interaction behave more like a sequence of blocking calls.(((range="endofrange", startref="ix_appdx-web3js-tutorial-asciidoc0")))
